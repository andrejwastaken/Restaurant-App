# Generated by Django 5.1.7 on 2025-06-19 11:26

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('users', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='OwnerProfile',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True, null=True)),
                ('address', models.CharField(blank=True, max_length=255, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, null=True)),
                ('latitude', models.DecimalField(blank=True, decimal_places=15, max_digits=17, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=15, max_digits=17, null=True)),
                ('is_validated', models.BooleanField(default=False)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='RestaurantSetup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('default_slot_duration', models.PositiveIntegerField(default=60, help_text='Default duration for a reservation slot in minutes.')),
                ('restaurant', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='setup', to='restaurants.restaurant')),
            ],
        ),
        migrations.CreateModel(
            name='SpecialDay',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day', models.DateField()),
                ('open_time', models.TimeField()),
                ('close_time', models.TimeField()),
                ('description', models.CharField(max_length=300)),
                ('setup', models.ForeignKey(help_text='The restaurant setup this Special Day belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='special_day', to='restaurants.restaurantsetup')),
            ],
        ),
        migrations.CreateModel(
            name='TableType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text="A descriptive name for this table type (e.g., '2-person table', '4-person booth').", max_length=100)),
                ('capacity', models.PositiveIntegerField(default=2, help_text='The maximum number of guests this type of table can accomodate')),
                ('setup', models.ForeignKey(help_text='The restaurant setup this table type belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='table_types', to='restaurants.restaurantsetup')),
            ],
            options={
                'verbose_name': 'Table Type',
                'verbose_name_plural': 'Table Types',
                'unique_together': {('setup', 'name')},
            },
        ),
        migrations.CreateModel(
            name='OperationHours',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], help_text='The day of the week this table belongs to.')),
                ('open_time', models.TimeField()),
                ('close_time', models.TimeField()),
                ('setup', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='operating_hours', to='restaurants.restaurantsetup')),
            ],
            options={
                'verbose_name': 'Operating Hour',
                'verbose_name_plural': 'Operating Hours',
                'ordering': ['day_of_week', 'open_time'],
                'unique_together': {('setup', 'day_of_week', 'open_time', 'close_time')},
            },
        ),
        migrations.CreateModel(
            name='Table',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('is_smoking', models.BooleanField(default=False, help_text='Is smoking allowed on this table')),
                ('x_position', models.FloatField()),
                ('y_position', models.FloatField()),
                ('width', models.PositiveIntegerField()),
                ('height', models.PositiveIntegerField()),
                ('radius', models.PositiveIntegerField()),
                ('shape', models.CharField(choices=[('RECTANGLE', 'Rectangle'), ('CIRCLE', 'Circle')], default='RECTANGLE', help_text='The shape this table has on canvas', max_length=10)),
                ('setup', models.ForeignKey(help_text='The restaurant setup this table belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='tables', to='restaurants.restaurantsetup')),
                ('table_type', models.ForeignKey(help_text='The table type this table belongs to.', on_delete=django.db.models.deletion.CASCADE, related_name='tables', to='restaurants.tabletype')),
            ],
            options={
                'verbose_name': 'Table',
                'verbose_name_plural': 'Tables',
                'unique_together': {('setup', 'name')},
            },
        ),
    ]
